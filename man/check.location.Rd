% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/check.location.R
\name{check.location}
\alias{check.location}
\title{Compare Location Differences Between Test Halves}
\usage{
check.location(half1, half2, B = 2000, conf = 0.95)
}
\arguments{
\item{half1}{A numeric matrix or data frame containing item scores for the first test half.}

\item{half2}{A numeric matrix or data frame containing item scores for the second test half.}

\item{B}{Integer. The number of bootstrap resamples for confidence intervals (default = 2000).}

\item{conf}{Numeric. The confidence level for the interval estimation (default = 0.95).}
}
\value{
A data frame with the following columns:
\itemize{
  \item \code{Test}: The name of the statistical test.
  \item \code{Statistic}: The computed test statistic.
  \item \code{p_value}: The p-value associated with the test.
  \item \code{CI_lower}: The lower bound of the confidence interval for the effect size.
  \item \code{CI_upper}: The upper bound of the confidence interval for the effect size.
  \item \code{ES}: The effect size estimate.
}
}
\description{
This function evaluates differences in central tendency between two test halves
using both parametric and non-parametric tests. It includes the Wilcoxon signed-rank test
and Yuen's robust t-test, along with effect size calculations.
}
\details{
This function calculates two different tests for assessing location differences between test halves:

- **Wilcoxon Signed-Rank Test**: A non-parametric test that compares paired samples.
- **Yuen's Robust T-Test**: A robust alternative to the paired t-test that handles heteroscedasticity.

The function also estimates effect sizes:

- **Wilcoxon Rank Correlation (`rc`)**: Obtained from `rcompanion::wilcoxonPairedRC`.
- **AKP Robust Effect Size**: Based on Algina, Keselman, & Penfield (2005), extracted from `WRS2::dep.effect`.
}
\examples{
# Simulated test halves
set.seed(123)
half1 <- matrix(sample(1:5, 30, replace = TRUE), nrow = 10)
half2 <- matrix(sample(1:5, 30, replace = TRUE), nrow = 10)

# Compare location differences
check.location(half1, half2, B = 1000, conf = 0.95)

}
